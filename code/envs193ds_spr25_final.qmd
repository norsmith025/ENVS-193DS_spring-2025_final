---
title: "envs193ds_spr25_final"
author: "Nora Smith"
date: 2025-06-10
format: html
editor: visual
---

# Part 1. Set up tasks

## Set up

```{r}
#| message: FALSE

# read in packages 
library(tidyverse) # load tidyverse
library(janitor) # load janitor
library(MuMIn) # load MuMIn
library(readxl) # load readxl
library(DHARMa) # load DHARMa
library(flextable) # load flextable
library(rstatix) # load rstatix
library(gt) # load gt
library(here) # load here
library(scales) # load scales

# read in data
sst <- read_csv("data/SST_update2023.csv") # create sst object from SST_update2023 
nest_boxes <- read_csv("data/occdist.csv") # create nest_boxes object from occdist
```

# Part 2. Problems

## Problem 1. Research writing

### a. Transparent statistical methods

In part 1, they likely used a Pearson's r test, since they analyzed the relationship between two continuous variables (distance and annual nitrogen load). In part 2, they likely used ANOVA, since they compared the mean/average nitrogen loads between sources (urban land, atmospheric deposition, fertilizer, wastewater treatment, and grasslands).

### b. More information needed

One thing that could have been added to the results section is a post-hoc test, which would communicate which groups differ, instead of just telling that there is a difference between the groups; an example of a post-hoc test that could be used is the Tukey's Honestly Significant Difference (HSD). This would allow the results to go beyond "we reject the null hypothesis that there is no difference in average nitrogen load..." and be able to communicate which of the groups from urban land, atmospheric deposition, fertilizer, wastewater treatment, and grasslands differ the most. Another thing that would add more context to the results could be providing the mean of each groups' nitrogen load and their standard deviations. Knowing the mean for each groups' would allow the reader to know how much the nitrogen load differs per source category, and the standard deviations would help show dispersed the nitrogen load is per source category.

### c. Suggestions for rewriting

We found that there was a direct relationship between sources' distance from headwaters (km) and the annual total nitrogen loads (km). (Pearson's r test: *r* = correlation coefficient, *p* = 0.03, α = significance level, *n* = sample size). We also found that nitrogen load varied by source type, with certain land-uses impacting the nitrogen load more than others, indicating that land-use can influence nitrogen loading. The post-hoc Tukey's HSD test identifies \_\_\_ as the source(s) that differ(s) the most. (ANOVA: *F* = F-statistic, *p* = 0.02, α = significance level, *df* = degress of freedom, *n* = sample size)

## Problem 2

### a. Cleaning and Summarizing

```{r}
sst_clean <- sst |> # create sst_clean object from sst data frame
  mutate(date = ymd(date)) |> # convert to date format
  mutate(year = year(date), # pull out year
         month = month(date, label = TRUE, abbr = TRUE)) |> # pull out month as factor
  filter(year %in% 2018:2023) |> # filter years, keeping 2018-2023
  group_by(year, month) |> # group by year and month
  summarize(mean_monthly_sst = mean(temp, na.rm = TRUE), # average temp across sites
            .groups = "drop") |> # return data frame ungrouped
  mutate(year = factor(year)) # convert year to a factor

# create data frame
sst_clean |> slice_sample(n = 5) # display sample of 5 rows from cleaned data
str(sst_clean) # display structure of cleaned data 
  
```

### b. Visualize the data

```{r}
#| warnings: FALSE # hide warnings

# recreate the visualization
ggplot(sst_clean, aes(x = month, y = mean_monthly_sst, group = year, color = year)) + # create plot
  geom_line(linewidth = 1) + # add lines 
  geom_point(size = 2) + # add points
  scale_color_manual(values = colorRampPalette(c("darkseagreen2", "black"))(6)) + # manually pick color gradient
  labs(x = "Month", # label x-axis
       y = "Mean monthly sea surface temperature (°C)", # label y-axis
       color = "Year") + # color gradient depicts years
  theme_minimal() + # use minimal theme
  theme(panel.grid = element_blank(), # remove grid lines 
        panel.border = element_rect(color = "darkgrey", fill = NA), # make plot border dark grey line
        panel.background = element_rect(fill = "white"), # make panel background white
        legend.position = c(0.15, 0.8), # position the legend
        legend.title = element_text(size = 10), # change legend title font size
        legend.text = element_text(size=8)) # change legend labels font size
```

## Problem 3. Data Analysis

### a. Response variable

The 1s and 0s in this data set indicate whether or not there were birds nesting in a nesting box, and what kind. A 0 in the column indicated that that species was not present in the nesting box, while a 1 indicated that species was using the nesting box.

### b. Purpose of study

The Swift Parrots are an endangered species, and the nesting boxes were implemented as part of conservation efforts for this study, and the Common Starlings and Tree Martins are considered competition to the parrots success. They do not rely on the nesting boxes, but use them anyway, which can displace the Swift Parrots and decrease their nesting grounds.

### c. Difference in "seasons"

The "seasons," or years, referred to in this study are 2016 and 2019, and they represent the breeding seasons of the Swift Parrots. Comparing the two years can help analyze whether or not the parrots nesting patterns with the artificial nesting boxes are consistent, or if they change depending on season specific factors.

### d. Table of models

```{r}
#| echo: FALSE # do not include in source code
#| output: FALSE # do not include output

nest_boxes <- nest_boxes %>% # clean column names
  rename_all(~str_replace_all(., " ", "_")) # replace spaces with underscores "_"

nest_boxes_clean <- nest_boxes %>% # convert data type
  mutate(season = as.factor(season), # convert season to a factor (2016 or 2019)
         sp = as.numeric(as.character(sp)), # convert sp occupancy to numeric (0 or 1)
         edge_distance = as.numeric(edge_distance)) # edge_distance is numeric 

nest_boxes_clean |> slice_sample(n = 5) # show a sample of 5 rows from the cleaned data
str(nest_boxes) # display structure of cleaned data
```

```{r}
# create model summary table of 4 models
model_table <- tibble(model_number = 1:4, # give models numbers (1-4)
                      season = c("No", "Yes", "Yes", "No"), # Does the model include season? 
                      distance_to_forest_edge = c("No", "Yes", "No", "Yes"), # does the model include distance to forest edge? 
                      model_description = c("Null Model (no predictors)", # description of model with neither variable
                                            "FUll Model (season and edge distance)", # description of model with both variables 
                                            "Season-Only Model", # description of model with only season
                                            "Distance-Only Model")) # description of model with only distance 

print(model_table) # display model summary table 
```

### e. Run the models

```{r}
#| output: FALSE 

# model 1: null model (no predictors)
Model_1 <- glm(sp ~ 1, # include neither variable
              data = nest_boxes_clean, # data frame
              family = binomial) # data is binomial

# model 2: full model (season and edge distance)
Model_2 <- glm(sp ~ season + edge_distance, # include both variables
              data = nest_boxes_clean, # data frame
              family = binomial) # data is binomial

# model 3: season-only model
Model_3 <- glm(sp ~ season, # include only season
              data = nest_boxes_clean, # data frame
              family = binomial) # data is binomial

# model 4: distance-only model
Model_4 <- glm(sp ~ edge_distance, # include only distance to forest edge
              data = nest_boxes_clean, # data frame
              family = binomial) # data is binomial

```

### f. Check the diagnostics

```{r}
#| warning: FALSE

# null model
sim1 <- simulateResiduals(Model_1) # create sim1
plot(sim1) # plot sim1

# full model
sim2 <- simulateResiduals(Model_2) # create sim2
plot(sim2) # plot sim2

# season-only model
sim3 <- simulateResiduals(Model_3) # create sim3
plot(sim3) # plot sim3

# distance-only model
sim4 <- simulateResiduals(Model_4) # create sim4
plot(sim4) # plot sim4

```

### g. Select the best model

### h. Visualize the model predictions

### i. Write a caption for your figure

### j. Calculate model predictions

### k. Interpret your results
